def vJavaLang = 1.8
def vertxProjects = [
    project(':v-std-api'),
    project(':v-std-service-user')
]
def serviceProjects = [
    project(':v-std-service-user')
]

project.ext {
    projectVersion = '1.0.0-SNAPSHOT'

    lombokVersion = '1.16.2'
    slf4jVersion = '1.7.12'
    logbackVersion = '1.1.3'
    vertxVersion = '3.0.0-milestone6'
    jacksonVersion = '2.5.2'
    rxVersion = '1.0.8'
    guiceVersion = '4.0'
    daggerVersion = '2.0'
    jooqVersion = '3.6.1'
    pgVersion = '9.4-1201-jdbc41'
    junitVersion = '4.12'
}

buildscript {
    repositories {
        maven { url 'http://repo.spring.io/plugins-release' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.1.1'
        classpath 'nu.studer:gradle-jooq-plugin:1.0.5'
        classpath 'org.postgresql:postgresql:9.4-1201-jdbc41'
        classpath 'io.spring.gradle:dependency-management-plugin:0.5.1.RELEASE'
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
    }
}

configure(allprojects) {
    group 'com.panjiesw'
    version '1.0.0-SNAPSHOT'

    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'

    targetCompatibility = vJavaLang
    sourceCompatibility = vJavaLang

    jar.version = projectVersion

    repositories {
        mavenCentral()
    }

    idea.module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
        excludeDirs += [
            file('bin'),
            // containing build artifacts from Eclipse (if any)
            file('work'),
            // containing transient artifacts used by embedded Tomcat
            file('logs'),
            // containing app logs written by embedded Tomcat
            file('data'),
            // containing logs and data written by elasticsearch
            file('.settings') // containing intentionally checked-in Eclipse metadata
        ]
    }

    // Ensure that all Gradle-compiled classes are available to Eclipse's
    // classpath.
    eclipseClasspath.dependsOn testClasses

    // Skip generation and removal of .settings/org.eclipse.jdt.core.prefs files
    // during the normal `gradle eclipse` / `gradle cleanEclipse` lifecycle, as
    // these files have been checked in with formatting settings imported from
    // style/sagan-format.xml and style/sagan.import order.
    // See http://www.gradle.org/docs/current/userguide/eclipse_plugin.html
    eclipseJdt.onlyIf { false }
    cleanEclipseJdt.onlyIf { false }

    eclipse {
        classpath {
            containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
            containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
        }
    }
}

configure(subprojects) {
    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        dependencies {
            dependencySet(group: 'org.slf4j', version: slf4jVersion) {
                entry 'slf4j-api'
                entry 'slf4j-simple'
            }
            dependency "ch.qos.logback:logback-classic:$logbackVersion"
            dependencySet(group: 'com.fasterxml.jackson.core', version: jacksonVersion) {
                entry 'jackson-databind'
                entry 'jackson-core'
                entry 'jackson-annotations'
            }
            dependency "org.projectlombok:lombok:$lombokVersion"
            dependency "io.reactivex:rxjava:$rxVersion"
            dependency "com.google.inject:guice:$guiceVersion"
            dependencySet(group: 'com.google.dagger', version: daggerVersion) {
                entry 'dagger'
                entry 'dagger-compiler'
            }
            dependencySet(group: 'org.jooq', version: jooqVersion) {
                entry 'jooq'
                entry 'jooq-meta'
                entry 'jooq-codegen'
            }
            dependency "org.postgresql:postgresql:$pgVersion"
            dependency "junit:junit:$junitVersion"
        }

        imports {
            mavenBom "io.vertx:vertx-dependencies:$vertxVersion"
        }
    }

    dependencies {
        compile 'org.slf4j:slf4j-api'
        compile 'ch.qos.logback:logback-classic'
        compile 'org.projectlombok:lombok'
        compile 'org.apache.commons:commons-lang3:3.4'
        compile 'commons-validator:commons-validator:1.4.1'
        testCompile 'junit:junit'
    }
}

configure(vertxProjects) {
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'application'
    dependencies {
        compile 'io.vertx:vertx-core'
        compile 'io.vertx:vertx-hazelcast'
        compile 'org.javassist:javassist:3.19.0-GA'
        testCompile 'io.vertx:vertx-unit'
    }
}

configure(serviceProjects) {
    dependencies {
        compile 'io.vertx:vertx-service-proxy'
        compile 'io.vertx:vertx-service-factory'
        compile 'io.vertx:vertx-codegen'
    }
}

task wrapper(type: Wrapper) { gradleVersion = '2.3' }
